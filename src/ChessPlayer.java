import java.util.concurrent.Semaphore;
import java.util.Random;


 //–ö–ª–∞—Å, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –≥—Ä–∞–≤—Ü—è –≤ —à–∞—Ö–∏.
 //–ö–æ–∂–µ–Ω –≥—Ä–∞–≤–µ—Ü—å –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —É –≤–ª–∞—Å–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ.
 //–†–µ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å Runnable.

public class ChessPlayer implements Runnable {

    private final String name; // –Ü–º'—è –≥—Ä–∞–≤—Ü—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ì—Ä–∞–≤–µ—Ü—å –ë—ñ–ª–∏–º–∏")
    private final Semaphore mySemaphore; // –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—É –Ω–∞ —Ö—ñ–¥
    private final Semaphore opponentSemaphore; // –°–µ–º–∞—Ñ–æ—Ä —Å—É–ø–µ—Ä–Ω–∏–∫–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ö—ñ–¥
    private static final int MAX_MOVES = 5; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ–¥—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó
    private final Random random = new Random(); // –î–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó —á–∞—Å—É –Ω–∞ —Ä–æ–∑–¥—É–º–∏

    public ChessPlayer(String name, Semaphore mySemaphore, Semaphore opponentSemaphore) {
        this.name = name;
        this.mySemaphore = mySemaphore;
        this.opponentSemaphore = opponentSemaphore;
    }


     //–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ –ø–æ—Ç–æ—Ü—ñ.
     //–ú—ñ—Å—Ç–∏—Ç—å –ª–æ–≥—ñ–∫—É –≥—Ä–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è.

    @Override
    public void run() {
        // –ì—Ä–∞ —Ç—Ä–∏–≤–∞—î, –ø–æ–∫–∏ –∫–æ–∂–µ–Ω –≥—Ä–∞–≤–µ—Ü—å –Ω–µ –∑—Ä–æ–±–∏—Ç—å MAX_MOVES —Ö–æ–¥—ñ–≤
        for (int i = 1; i <= MAX_MOVES; i++) {
            try {
                // 1. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–≤–æ—î—ó —á–µ—Ä–≥–∏ (—Å–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∑–≤—ñ–ª –≤—ñ–¥ —Å–µ–º–∞—Ñ–æ—Ä–∞)
                System.out.println(name + " –æ—á—ñ–∫—É—î –Ω–∞ —Å–≤—ñ–π —Ö—ñ–¥...");
                mySemaphore.acquire(); // –ë–ª–æ–∫—É—î –ø–æ—Ç—ñ–∫, –¥–æ–∫–∏ –Ω–µ –±—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–æ–∑–≤—ñ–ª

                // 2. –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–æ–¥—É
                System.out.println("------------------------------------------");
                System.out.println("–ó–∞—Ä–∞–∑ —Ö—ñ–¥ —Ä–æ–±–∏—Ç—å " + name + " (–•—ñ–¥ #" + i + ")");

                // –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ä–æ–∑–¥—É–º—ñ–≤ –Ω–∞–¥ —Ö–æ–¥–æ–º
                int thinkingTime = random.nextInt(3000) + 1000; // –≤—ñ–¥ 1 –¥–æ 4 —Å–µ–∫—É–Ω–¥
                System.out.println(name + " –¥—É–º–∞—î " + thinkingTime / 1000.0 + " —Å–µ–∫—É–Ω–¥...");
                Thread.sleep(thinkingTime); // –ü—Ä–∏–∑—É–ø–∏–Ω—è—î–º–æ –ø–æ—Ç—ñ–∫, —ñ–º—ñ—Ç—É—é—á–∏ —Ä–æ–∑–¥—É–º–∏

                System.out.println("‚úÖ " + name + " –∑—Ä–æ–±–∏–≤ —Å–≤—ñ–π —Ö—ñ–¥!");
                System.out.println("------------------------------------------\n");


            } catch (InterruptedException e) {
                // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –ø–æ—Ç—ñ–∫ –±—É–¥–µ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (sleep –∞–±–æ acquire)
                System.err.println(name + " –±—É–≤ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∏–π –ø—ñ–¥ —á–∞—Å –≥—Ä–∏. –ì—Ä–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è.");
                // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É
                Thread.currentThread().interrupt();
                return; // –ó–∞–≤–µ—Ä—à—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É
            } finally {
                // 3. –ü–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥—É —Å—É–ø–µ—Ä–Ω–∏–∫—É (–∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Å–µ–º–∞—Ñ–æ—Ä–∞ —Å—É–ø–µ—Ä–Ω–∏–∫–∞)
                // –¶–µ–π –±–ª–æ–∫ –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞,
                // —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –≤–∑–∞—î–º–Ω–æ–≥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è (deadlock).
                opponentSemaphore.release();
            }
        }
        System.out.println("üèÅ " + name + " –∑–∞–∫—ñ–Ω—á–∏–≤ —Å–≤–æ—é –ø–∞—Ä—Ç—ñ—é.");
    }
}